Build an AI-powered Meeting Minutes to Task Converter web application. This app allows users to paste meeting transcripts, uses OpenAI API to extract tasks with assignees and deadlines, and displays them in a manageable task list. Users can authenticate, paste transcripts, review extracted tasks in a modal, edit them, and manage their task list over time.
Tech Stack:

Frontend: React with Tailwind CSS
Backend: Node.js/Express with OpenAI API integration
Database: SQLite for MVP (Users and Tasks tables only)
Authentication: JWT-based username/password system

Database Schema:
sqlusers (
  id INTEGER PRIMARY KEY,
  username VARCHAR(50) UNIQUE,
  password_hash VARCHAR(255),
  timezone VARCHAR(50),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)

tasks (
  id INTEGER PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  description TEXT,
  assignee VARCHAR(100),
  due_date_utc TIMESTAMP,
  priority VARCHAR(2) DEFAULT 'P3',
  completed BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
CRITICAL Backend Requirements:

Authentication System:

Create /api/register and /api/login endpoints
Hash passwords using bcrypt
Return JWT tokens on successful login
Include middleware to verify JWT on protected routes
Store user timezone in database during registration


OpenAI Integration (/api/extract-tasks):

Use GPT-4 model with this exact system prompt: "Extract tasks from meeting transcript. Return JSON array with objects containing: task_description, assignee, due_date (parse relative dates like 'tomorrow', 'tonight', 'Wednesday' to actual dates), priority (default P3 if not specified, can be P1, P2, P3, or P4)"
Handle API errors gracefully
Parse response and validate JSON structure
Return extracted tasks without saving them yet


TIMEZONE HANDLING (CRITICAL):

When user inputs due dates/times, they are in their LOCAL timezone
ALWAYS convert local time to UTC before storing in database
Store in due_date_utc column as UTC timestamp
When displaying tasks, convert UTC back to user's local timezone
Use user's timezone from their profile or detect from browser
Example: User in IST enters "5 PM tomorrow" → convert to UTC (11:30 AM tomorrow UTC) → store UTC → display back as "5:00 PM" in IST


Task Management Endpoints:

GET /api/tasks - Return all user tasks converted to their local timezone
POST /api/tasks - Save approved tasks (convert local time to UTC)
PUT /api/tasks/:id - Update task (handle timezone conversion)
DELETE /api/tasks/:id - Delete task
Always include user_id from JWT token in database operations


Error Handling:

OpenAI API failures: Return {error: "Failed to extract tasks"}
No tasks found: Return {tasks: [], message: "No tasks found"}
Database errors: Return appropriate error codes
Authentication errors: Return 401 status



Pages:

Login page with username/password fields
Dashboard with transcript textarea, extract button, and tasks table

Workflow:

User logs in → redirected to dashboard
User pastes transcript → clicks "Extract Tasks"
API calls OpenAI → returns extracted tasks
Show tasks in modal for review/editing
User clicks "Approve All" → saves to database
Tasks appear in main table with edit/delete capabilities

Priority: Focus on robust backend functionality, proper timezone handling, and OpenAI integration. Ensure all date/time operations correctly convert between user timezone and UTC storage.